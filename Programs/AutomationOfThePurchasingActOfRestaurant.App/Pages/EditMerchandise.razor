<h3>EditMerchandise</h3>
@page "/MainMerchandise/EditMerchandise/{id:guid}"
@inject IPurchasingActOfRestaurantClient PurchasingClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@using System.Threading
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators.RequestModel
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators.ResponceModel
@using Company.AutomationOfThePurchasingActOfRestaurant.Client
@using System.Text.Json

<PageTitle>Редактирование Товара</PageTitle>

<h3>Редактирование Товара</h3>

<EditForm Model="entity" OnValidSubmit="HandleSubmit">
    <FluentValidationValidator Validator="validationRules" />

    <div class="form-group">
        <label for="Name">Название, характеристика:</label>
        <InputText id="Name" @bind-Value="entity.Name" class="form-control" />
        <ValidationMessage For="@(() => entity.Name)" />
    </div>

    <div class="form-group">
        <label for="Count">Количество товара:</label>
        <InputNumber id="Count" @bind-Value="entity.Count" class="form-control" />
        <ValidationMessage For="@(() => entity.Count)" />
    </div>

    <div class="form-group">
        <label for="MerchandiseKey">Код товара:</label>
        <InputNumber id="MerchandiseKey" @bind-Value="entity.MerchandiseKey" class="form-control" />
        <ValidationMessage For="@(() => entity.MerchandiseKey)" />
    </div>

    <div class="form-group">
        <label for="MeasurementUnitSelection">Выберите единицу измерения:</label>
        <select id="MeasurementUnitSelection" class="form-control" @bind="selectedMeasurementUnitId">
            @foreach (var measurementUnit in measurementUnits)
            {
                <option value="@measurementUnit.Id">@measurementUnit.Name</option>
            }
        </select>
        <ValidationMessage For="@(() => entity.MeasurementUnitId)" />
    </div>

    <div class="form-group">
        <label for="PriceSelection">Цена за единицу товара:</label>
        <select id="PriceSelection" class="form-control" @bind="selectedPriceId">
            @foreach (var price in availablePrices)
            {
                <option value="@price.Id">@price.CostPerUnit.ToString("F2")</option>
            }
        </select>
        <label for="PriceSelection" @ref="priceSelectionLabel"></label>
        <div class="form-group">
            <button type="button" class="btn btn-success" @onclick="AddPrice">Добавить цену</button>
            <button type="button" class="btn btn-danger" @onclick="RemovePrice">Убрать цену</button>
        </div>
    </div>

    <h4>Добавленные цены:</h4>
    <ul>
        @if (entity.Prices.Count > 0)
        {
            foreach (var price in entity.Prices)
            {
                <li>Цена: @price.CostPerUnit.ToString("F2")</li>
            }
        }
        else
        {
            <h>Нет добавленных цен</h>
        }
    </ul>

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-success">Сохранить</button>
        <button type="button" class="btn btn-danger" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid id { get; set; }

    private MerchandiseResponseModel entity = new();
    private MerchandiseResponseModelValidator validationRules = new MerchandiseResponseModelValidator();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    private ICollection<MerchandisePriceResponseModel> availablePrices;
    private ElementReference priceSelectionLabel;
    private ICollection<MeasurementUnitResponseModel> measurementUnits;

    private Guid selectedPriceId;
    private Guid selectedMeasurementUnitId;

    protected override async Task OnInitializedAsync()
    {
        // Загрузка товара для редактирования
        var merchandise = await PurchasingClient.GetMerchandiseByIdAsync(id, cancellationTokenSource.Token);

        selectedMeasurementUnitId = merchandise.MeasurementUnitId;

        // Загрузка доступных цен и единиц измерения
        availablePrices = await PurchasingClient.GetAllMerchandisePricesAsync(cancellationTokenSource.Token);

        measurementUnits = await PurchasingClient.GetAllMeasurementUnitsAsync(cancellationTokenSource.Token);
    }

    private void AddPrice()
    {
        var selectedPrice = availablePrices.FirstOrDefault(p => p.Id == selectedPriceId);
        if (selectedPrice != null && !entity.Prices.Any(p => p.Id == selectedPriceId))
        {
            entity.Prices.Add(selectedPrice);
        }
    }

    private void RemovePrice()
    {
        var priceToRemove = entity.Prices.FirstOrDefault(p => p.Id == selectedPriceId);
        if (priceToRemove != null)
        {
            entity.Prices.Remove(priceToRemove);
        }
    }

    private async Task HandleSubmit()
    {
        var validationResult = validationRules.Validate(entity);
        entity.MeasurementUnitId = selectedMeasurementUnitId;
        entity.MeasurementUnit = measurementUnits.FirstOrDefault(m => m.Id == selectedMeasurementUnitId);
        if (entity.Prices.Count > 0)
        {
            if (validationResult.IsValid)
            {
                // Обновление товара
                await PurchasingClient.UpdateMerchandiseAsync(entity, cancellationTokenSource.Token);
                NavigationManager.NavigateTo("/MainMerchandise");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("setLabelText", priceSelectionLabel, "Не указана цена товара");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/MainMerchandise");
    }
}
