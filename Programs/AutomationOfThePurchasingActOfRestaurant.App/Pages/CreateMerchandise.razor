<h3>CreateMerchandise</h3>
@page "/MainMerchandise/CreateMerchandise"
@inject IPurchasingActOfRestaurantClient PurchasingClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@using System.Threading
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators.RequestModel
@using Company.AutomationOfThePurchasingActOfRestaurant.Client
@using System.Text.Json

<PageTitle>Создание Товара</PageTitle>

<h3>Создание Товара</h3>

<EditForm Model="entity" OnValidSubmit="HandleSubmit">
    <FluentValidationValidator Validator="validationRules" />

    <div class="form-group">
        <label for="Name">Название, характеристика:</label>
        <InputText id="Name" @bind-Value="entity.Name" class="form-control" />
        <ValidationMessage For="@(() => entity.Name)" />
    </div>

    <div class="form-group">
        <label for="Count">Количество товара:</label>
        <InputNumber id="Count" @bind-Value="entity.Count" class="form-control" />
        <ValidationMessage For="@(() => entity.Count)" />
    </div>

    <div class="form-group">
        <label for="MerchandiseKey">Код товара:</label>
        <InputNumber id="MerchandiseKey" @bind-Value="entity.MerchandiseKey" class="form-control" />
        <ValidationMessage For="@(() => entity.MerchandiseKey)" />
    </div>

    <div class="form-group">
        <label for="MeasurementUnitSelection">Выберите единицу измерения:</label>
        <select id="MeasurementUnitSelection" class="form-control" @bind="selectedMeasurementUnitId">
            @foreach (var measurementUnit in measurementUnits)
            {
                <option value="@measurementUnit.Id">@measurementUnit.Name</option>
            }
        </select>
        <ValidationMessage For="@(() => entity.MeasurementUnitId)" />
    </div>

    <div class="form-group">
        <label for="PriceSelection">Цена за единицу товара:</label>
        <select id="PriceSelection" class="form-control" @bind="selectedPriceId">
            @foreach (var price in availablePrices)
            {
                <option value="@price.Id">@price.CostPerUnit.ToString("F2")</option>
            }
        </select>
        <label for="PriceSelection" @ref="priceSelectionLabel"></label>
        <div class="form-group">
            <button type="button" class="btn btn-success" @onclick="AddPrice">Добавить цену</button>
            <button type="button" class="btn btn-danger" @onclick="RemovePrice">Убрать цену</button>
        </div>
    </div>

    <div class="form-group">
        <label for="PriceSelection">Выберите цену:</label>
        <select id="PriceSelection" class="form-control" @bind="selectedPriceId">
            @foreach (var price in availablePrices)
            {
                <option value="@price.Id">@price.CostPerUnit.ToString("F2")</option>
            }
        </select>
        <label for="PriceSelection" @ref="priceSelectionLabel"></label>
        <div class="form-group">
            <button type="button" class="btn btn-success" @onclick="AddPrice">Добавить цену</button>
            <button type="button" class="btn btn-danger" @onclick="RemovePrice">Убрать цену</button>
        </div>
    </div>

    <h4>Добавленные цены:</h4>
    <ul>
        @if (temporaryPrices.Count > 0)
        {
            foreach (var price in temporaryPrices)
            {
                <li>Цена: @price.CostPerUnit.ToString("F2")</li>
            }
        }
        else
        {
            <h>Нет добавленных цен</h>
        }
    </ul>

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-success">Добавить</button>
        <button type="button" class="btn btn-danger" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>

@code {
    private MerchandiseRequest entity = new();
    private MerchandiseRequestValidator validationRules = new MerchandiseRequestValidator();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    // Список доступных цен
    private ICollection<MerchandisePriceResponseModel> availablePrices;

    private ElementReference priceSelectionLabel;

    private ICollection<MeasurementUnitResponseModel> measurementUnits;

    // Временный список добавленных цен
    private ICollection<MerchandisePriceResponseModel> temporaryPrices = new List<MerchandisePriceResponseModel>();

    // Выбранный Id цены из выпадающего списка
    private Guid selectedPriceId;

    private Guid selectedMeasurementUnitId;

    protected override async Task OnInitializedAsync()
    {
        // Получение списка доступных цен при загрузке страницы
        availablePrices = await PurchasingClient.GetAllMerchandisePricesAsync(cancellationTokenSource.Token);
        measurementUnits = await PurchasingClient.GetAllMeasurementUnitsAsync(cancellationTokenSource.Token);
    }

    // Добавление цены в временный список
    private void AddPrice()
    {
        var selectedPrice = availablePrices.FirstOrDefault(p => p.Id == selectedPriceId);
        if (selectedPrice != null && !temporaryPrices.Any(p => p.Id == selectedPriceId))
        {
            temporaryPrices.Add(selectedPrice);
        }
    }

    // Удаление цены из временного списка
    private void RemovePrice()
    {
        var priceToRemove = temporaryPrices.FirstOrDefault(p => p.Id == selectedPriceId);
        if (priceToRemove != null)
        {
            temporaryPrices.Remove(priceToRemove);
        }
    }


    private async Task HandleSubmit()
    {
        var validationResult = validationRules.Validate(entity);
        entity.MeasurementUnitId = selectedMeasurementUnitId;
        entity.MeasurementUnit = measurementUnits.FirstOrDefault(m => m.Id == selectedMeasurementUnitId);
        if (temporaryPrices.Count > 0)
        {
            entity.Prices = temporaryPrices;
            if (validationResult.IsValid)
            {
                var newEntity = await PurchasingClient.AddMerchandiseAsync(entity, cancellationTokenSource.Token);
                var updatedMeasurementUnit = await PurchasingClient.GetMeasurementUnitByIdAsync(selectedMeasurementUnitId, cancellationTokenSource.Token);
                updatedMeasurementUnit.Merchandises.Add(newEntity);
                await PurchasingClient.UpdateMeasurementUnitAsync(updatedMeasurementUnit, cancellationTokenSource.Token);
                foreach (var price in entity.Prices)
                {
                    var updatedPrice = await PurchasingClient.GetMerchandisePriceByIdAsync(price.Id, cancellationTokenSource.Token);
                    updatedPrice.MerchandiseId = newEntity.Id;
                    updatedPrice.Merchandise = newEntity;
                    await PurchasingClient.UpdateMerchandisePriceAsync(updatedPrice, cancellationTokenSource.Token);
                }
                NavigationManager.NavigateTo("/MainMerchandise");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("setLabelText", priceSelectionLabel, "Не указана цена товара");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/MainMerchandise");
    }
}