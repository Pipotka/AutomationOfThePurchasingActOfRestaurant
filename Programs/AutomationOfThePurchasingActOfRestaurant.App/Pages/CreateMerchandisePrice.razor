@page "/MainMerchandisePrice/CreateMerchandisePrice"
@inject IPurchasingActOfRestaurantClient PurchasingClient
@inject NavigationManager NavigationManager
@using System.Threading
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators.RequestModel
@using Company.AutomationOfThePurchasingActOfRestaurant.Client
@using System.Text.Json

<PageTitle>Создание Цены товара</PageTitle>

<h3>Создание Цены товара</h3>

<EditForm Model="entity" OnValidSubmit="HandleSubmit">
    <FluentValidationValidator Validator="validationRules" />

    <div class="form-group">
        <label for="CostPerUnit">Цена за единицу:</label>
        <InputNumber id="CostPerUnit" @bind-Value="entity.CostPerUnit" class="form-control" />
        <ValidationMessage For="@(() => entity.CostPerUnit)" />
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-success">Добавить</button>
        <button type="button" class="btn btn-danger" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>

@code {
    private MerchandisePriceRequest entity = new MerchandisePriceRequest();
    private MerchandisePriceRequestValidator validationRules = new MerchandisePriceRequestValidator();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task HandleSubmit()
    {
        var validationResult = validationRules.Validate(entity);
        if (validationResult.IsValid)
        {
            await PurchasingClient.AddMerchandisePriceAsync(entity, cancellationTokenSource.Token);
            NavigationManager.NavigateTo("/MainMerchandisePrice");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/MainMerchandisePrice");
    }
}