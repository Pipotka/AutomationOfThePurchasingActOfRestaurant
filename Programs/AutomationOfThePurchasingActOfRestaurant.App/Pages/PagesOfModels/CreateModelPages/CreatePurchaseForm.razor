@page "/MainPurchaseForm/CreatePurchaseForm"
@inject IPurchasingActOfRestaurantClient PurchasingClient
@inject NavigationManager NavigationManager
@using System.Threading
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators.RequestModel
@using Company.AutomationOfThePurchasingActOfRestaurant.Client
@using System.Text.Json

<PageTitle>Создание Закупочного акта</PageTitle>

<h3>Создание Закупочного акта</h3>

<EditForm Model="entity" OnValidSubmit="HandleSubmit">
    <FluentValidationValidator Validator="validationRules" />

    <label for="documentDate">Дата документа:</label>
    <InputDate id="documentDate" @bind-Value="entity.DocumentDate" />
    <ValidationMessage For="@(() => entity.DocumentDate)" />

    <label for="DocumentNumber">Номер документа:</label>
    <InputNumber id="DocumentNumber" @bind-Value="entity.DocumentNumber" />
    <ValidationMessage For="@(() => entity.DocumentNumber)" />

    <label for="AddressOfPurchase">Адрес закупки:</label>
    <InputText id="AddressOfPurchase" @bind-Value="entity.AddressOfPurchase" />
    <ValidationMessage For="@(() => entity.AddressOfPurchase)" />

    <div class="form-group">
        <label for="ApprovingOfficerId">Код формы:</label>
        <select id="ApprovingOfficerId" @bind:after="FormKeyChanged" @bind="entity.FormKeyId" class="form-control">
            @{
                if (formKeys.Count > 0)
                {
                    foreach (var item in formKeys)
                    {
                        <option value="@item.Id">@($"ОКПО:{item.Okpo}; ОКДП:{item.Okdp}; ОКУД:{item.Okud}; ИНН:{item.Tin};")</option>
                    }
                }
                else
                {
                    <option value="">Нет кодов формы</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => entity.FormKeyId)" />
    </div>

    <div class="form-group">
        <label for="ApprovingOfficerId">Утверждающий:</label>
        <select id="ApprovingOfficerId" @bind:after="ApproverChanged" @bind="entity.ApprovingOfficerId" class="form-control">
            @{
                if (approvers.Count > 0)
                {
                    foreach (var item in approvers)
                    {
                        <option value="@item.Id">@item.LastName</option>
                    }
                }
                else
                {
                    <option value="">Нет утверждающих</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => entity.ApprovingOfficerId)" />
    </div>

    <div class="form-group">
        <label for="SponsorOrganizationId">Организация-заказчик:</label>
        <select id="SponsorOrganizationId" @bind:after="SponsorOrganizationChanged" @bind="entity.SponsorOrganizationId" class="form-control">
            @{
                if (organizations.Count > 0)
                {
                    foreach (var item in organizations)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                else
                {
                    <option value="">Нет организаций</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => entity.SponsorOrganizationId)" />
    </div>

    <div class="form-group">
        <label for="ProcurementSpecialistId">Специалист по закупкам:</label>
        <select id="ProcurementSpecialistId" @bind:after="ProcurementSpecialistChanged" @bind="entity.ProcurementSpecialistId" class="form-control">
            @{
                if (employees.Count > 0)
                {
                    foreach (var item in employees)
                    {
                        <option value="@item.Id">@item.LastName</option>
                    }
                }
                else
                {
                    <option value="">Нет сотрудников</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => entity.ProcurementSpecialistId)" />
    </div>

    <div class="form-group">
        <label for="SalesmanId">Продавец:</label>
        <select id="SalesmanId" @bind:after="SalesmanChanged" @bind="entity.SalesmanId" class="form-control">
            @{
                if (salesmans.Count > 0)
                {
                    foreach (var item in salesmans)
                    {
                        <option value="@item.Id">@item.LastName</option>
                    }
                }
                else
                {
                    <option value="">Нет продавцов</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => entity.SalesmanId)" />
    </div>

    <div class="form-group">
        <label for="addProduct">Добавить товар:</label>
        <select id="addProduct" @bind="addedProductId" class="form-control">
            @{
                if (purchasedMerchandises.Count > 0)
                {
                    foreach (var item in purchasedMerchandises)
                    {
                        <option value="@item.Id">@($"Название:{item.Name}; Количество:{item.Count}; Цена:{item.Price};")</option>
                    }
                }
                else
                {
                    <option value="">Нет товаров</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => entity.PurchasedMerchandises)" />
        <button type="button" @onclick="AddProduct" class="btn btn-success">Добавить товар</button>
    </div>

    <h2 align="center">Закупленые товары</h2>
     <table class="table">
        <thead>
        <th>Название, характеристика товара</th>
        <th>Код товара</th>
        <th>Единица измерения</th>
        <th>Количество</th>
        <th>Цена за единицу товара</th>
        <th>Действия</th>
        </thead>
     
        @if (entity.PurchasedMerchandises.Count > 0)
        {
            <tbody>
                @foreach (var item in entity.PurchasedMerchandises)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.MerchandiseKey</td>
                        <td>@item.MeasurementUnit.Name</td>
                        <td>@item.Count</td>
                        <td>@item.Price</td>
                        <td>
                            <select class="form-control" @onchange="@(e => HandleActionSelection(e.Value.ToString(), item.Id))">
                                <option value="">Выберите действие</option>
                                <option value="Delete">Удалить</option>
                            </select>
                        </td>
                    </tr>
                }
            </tbody>
        }
        else
        {
            <h3 align="center">Нет закупленых товаров</h3>
        }
    </table>
    <label align="right">Полная стоимость:@TotalCost</label>
    
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-success">Добавить</button>
        <button type="button" class="btn btn-danger" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>

@code {
    private PurchaseFormRequest entity = new();
    private PurchaseFormRequestValidator validationRules = new PurchaseFormRequestValidator();
    private ICollection<FormKeyResponseModel> formKeys = new List<FormKeyResponseModel>();
    private ICollection<OrganizationResponseModel> organizations = new List<OrganizationResponseModel>();
    private ICollection<ApproverResponseModel> approvers = new List<ApproverResponseModel>();
    private ICollection<EmployeeResponseModel> employees = new List<EmployeeResponseModel>();
    private ICollection<SupplierResponseModel> salesmans = new List<SupplierResponseModel>();
    private ICollection<MerchandiseResponseModel> purchasedMerchandises = new List<MerchandiseResponseModel>();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    private double TotalCost = 0.00;
    private Guid addedProductId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        entity.SalesmanId = Guid.Empty;
        entity.ApprovingOfficerId = Guid.Empty;
        entity.PurchasedMerchandises = new List<MerchandiseResponseModel>();
        entity.DocumentDate = new DateTimeOffset(new DateTime(2000,1,1));
        entity.FormKeyId = Guid.Empty;
        entity.ProcurementSpecialistId = Guid.Empty;
        entity.SponsorOrganizationId = Guid.Empty;

        formKeys = await PurchasingClient.GetAllFormKeysAsync(cancellationTokenSource.Token);

        formKeys = formKeys.Where(x => x.PurchaseFormId == null).ToList();

        organizations = await PurchasingClient.GetAllOrganizationsAsync(cancellationTokenSource.Token);
        approvers = await PurchasingClient.GetAllApproversWithAllLinksAsync(cancellationTokenSource.Token);
        employees = await PurchasingClient.GetAllEmployeesWithLinksAsync(cancellationTokenSource.Token);
        salesmans = await PurchasingClient.GetAllSuppliersAsync(cancellationTokenSource.Token);
        purchasedMerchandises = await PurchasingClient.GetAllMerchandisesWithLinksAsync(cancellationTokenSource.Token);

        purchasedMerchandises = purchasedMerchandises.Where(x => x.PurchaseFormId == null).ToList();

        addedProductId = purchasedMerchandises.FirstOrDefault().Id;

        if (salesmans.Count > 0)
        {
            entity.SalesmanId = salesmans.FirstOrDefault().Id;
            entity.Salesman = salesmans.FirstOrDefault(x => x.Id == entity.SalesmanId);
        }
        if (approvers.Count > 0)
        {
            entity.ApprovingOfficerId = approvers.FirstOrDefault().Id;
            entity.ApprovingOfficer = approvers.FirstOrDefault(x => x.Id == entity.ApprovingOfficerId);
        }
        if (formKeys.Count > 0)
        {
            entity.FormKeyId = formKeys.FirstOrDefault().Id;
            entity.FormKey = formKeys.FirstOrDefault(x => x.Id == entity.FormKeyId);
        }
        if (employees.Count > 0)
        {
            entity.ProcurementSpecialistId = employees.FirstOrDefault().Id;
            entity.ProcurementSpecialist = employees.FirstOrDefault(x => x.Id == entity.ProcurementSpecialistId);
        }
        if (organizations.Count > 0)
        {
            entity.SponsorOrganizationId = organizations.FirstOrDefault().Id;
            entity.SponsorOrganization = organizations.FirstOrDefault(x => x.Id == entity.SponsorOrganizationId);
        }
    }

    private async Task HandleActionSelection(string action, Guid id)
    {
        switch (action)
        {
            case "Delete":
                var product = entity.PurchasedMerchandises.FirstOrDefault(x => x.Id == id);
                entity.PurchasedMerchandises.Remove(product);
                CalculateTotalCost();
                break;
        }
    }

    private async Task HandleSubmit()
    {
        var validationResult = validationRules.Validate(entity);
        if (validationResult.IsValid)
        {
            var newPurchaseForm = await PurchasingClient.AddPurchaseFormAsync(entity, cancellationTokenSource.Token);
            NavigationManager.NavigateTo("/MainPurchaseForm");
        }
    }

    private void ApproverChanged()
    {
        entity.ApprovingOfficer = approvers.FirstOrDefault(x => x.Id == entity.ApprovingOfficerId);
    }

    private void FormKeyChanged()
    {
        entity.FormKey = formKeys.FirstOrDefault(x => x.Id == entity.FormKeyId);
    }

    private void SponsorOrganizationChanged()
    {
        entity.SponsorOrganization = organizations.FirstOrDefault(x => x.Id == entity.SponsorOrganizationId);
    }

    private void ProcurementSpecialistChanged()
    {
        entity.ProcurementSpecialist = employees.FirstOrDefault(x => x.Id == entity.ProcurementSpecialistId);
    }

    private void SalesmanChanged()
    {
        entity.Salesman = salesmans.FirstOrDefault(x => x.Id == entity.SalesmanId);
    }

    private void AddProduct()
    {
        var product = entity.PurchasedMerchandises.FirstOrDefault(x => x.Id == addedProductId);
        if(product == null)
        {
            entity.PurchasedMerchandises.Add(purchasedMerchandises.FirstOrDefault(x => x.Id == addedProductId));
            CalculateTotalCost();
        }
    }

    private void CalculateTotalCost()
    {
        TotalCost = 0.00;
        foreach (var item in entity.PurchasedMerchandises)
        {
            TotalCost += item.Price * item.Count;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/MainPurchaseForm");
    }
}