@page "/MainFormKey/CreateFormKey"
@inject IPurchasingActOfRestaurantClient PurchasingClient
@inject NavigationManager NavigationManager
@using System.Threading
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators.RequestModel
@using Company.AutomationOfThePurchasingActOfRestaurant.Client
@using System.Text.Json

<PageTitle>Создание Кода формы</PageTitle>

<h3>Создание Кода формы</h3>

<EditForm Model="entity" OnValidSubmit="HandleSubmit">
    <FluentValidationValidator Validator="validationRules" />

    <div class="form-group">
        <label for="Okdp">ОКДП:</label>
        <InputText id="Okdp" @bind-Value="entity.Okdp" class="form-control" />
        <ValidationMessage For="@(() => entity.Okdp)" />
    </div>

    <div class="form-group">
        <label for="Okpo">ОКПО:</label>
        <InputText id="Okpo" @bind-Value="entity.Okpo" class="form-control" />
        <ValidationMessage For="@(() => entity.Okpo)" />
    </div>

    <div class="form-group">
        <label for="Okud">ОКУД:</label>
        <InputText id="Okud" @bind-Value="entity.Okud" class="form-control" />
        <ValidationMessage For="@(() => entity.Okud)" />
    </div>

    <div class="form-group">
        <label for="Tin">ИНН:</label>
        <InputText id="Tin" @bind-Value="entity.Tin" class="form-control" />
        <ValidationMessage For="@(() => entity.Tin)" />
    </div>

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-success">Добавить</button>
        <button type="button" class="btn btn-danger" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>

@code {
    private FormKeyRequest entity = new();
    private FormKeyRequestValidator validationRules = new FormKeyRequestValidator();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task HandleSubmit()
    {
        var validationResult = validationRules.Validate(entity);
        if (validationResult.IsValid)
        {
            var newEntity = await PurchasingClient.AddFormKeyAsync(entity, cancellationTokenSource.Token);
            NavigationManager.NavigateTo("/MainFormKey");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/MainFormKey");
    }
}