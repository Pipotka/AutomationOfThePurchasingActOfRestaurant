@page "/MainEmployeePosition/CreateEmployeePosition"
@inject IPurchasingActOfRestaurantClient PurchasingClient
@inject NavigationManager NavigationManager
@using System.Threading
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators
@using Company.AutomationOfThePurchasingActOfRestaurant.App.Infrastructure.Validators.RequestModel
@using Company.AutomationOfThePurchasingActOfRestaurant.Client
@using System.Text.Json

<PageTitle>Создание Должности сотрудника</PageTitle>

<h3>Создание Должности сотрудника</h3>

<EditForm Model="entity" OnValidSubmit="HandleSubmit">
    <FluentValidationValidator Validator="validationRules" />

    <div class="form-group">
        <label for="Name">Название:</label>
        <InputNumber id="Name" @bind-Value="entity.Name" class="form-control" />
        <ValidationMessage For="@(() => entity.Name)" />
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-success">Добавить</button>
        <button type="button" class="btn btn-danger" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>

@code {
    private EmployeePositionRequest entity = new();
    private EmployeePositionRequestValidator validationRules = new EmployeePositionRequestValidator();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task HandleSubmit()
    {
        var validationResult = validationRules.Validate(entity);
        if (validationResult.IsValid)
        {
            var newEntity = await PurchasingClient.AddEmployeePositionAsync(entity, cancellationTokenSource.Token);
            NavigationManager.NavigateTo("/MainEmployeePosition");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/MainEmployeePosition");
    }
}